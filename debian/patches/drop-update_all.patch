Description: replace usage of deprecated #update_all method in migrations
Author: Toshi MARUYAMA <marutosijp2@yahoo.co.jp>
Origin: upstream
Bug: http://www.redmine.org/issues/18132
Bug-Debian: https://bugs.debian.org/765466
Reviewed-by: Antonio Terceiro <terceiro@debian.org>
Last-Update: 2014-11-30
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/db/migrate/072_add_enumerations_position.rb
+++ b/db/migrate/072_add_enumerations_position.rb
@@ -4,7 +4,7 @@ class AddEnumerationsPosition < ActiveRe
     Enumeration.all.group_by(&:opt).each do |opt, enums|
       enums.each_with_index do |enum, i|
         # do not call model callbacks
-        Enumeration.update_all "position = #{i+1}", {:id => enum.id}
+        Enumeration.where({:id => enum.id}).update_all("position = #{i+1}")
       end
     end
   end
--- a/db/migrate/078_add_custom_fields_position.rb
+++ b/db/migrate/078_add_custom_fields_position.rb
@@ -4,7 +4,7 @@ class AddCustomFieldsPosition < ActiveRe
     CustomField.all.group_by(&:type).each  do |t, fields|
       fields.each_with_index do |field, i|
         # do not call model callbacks
-        CustomField.update_all "position = #{i+1}", {:id => field.id}
+        CustomField.where({:id => field.id}).update_all("position = #{i+1}")
       end
     end
   end
--- a/db/migrate/101_populate_changesets_user_id.rb
+++ b/db/migrate/101_populate_changesets_user_id.rb
@@ -7,7 +7,7 @@ class PopulateChangesetsUserId < ActiveR
         username, email = $1.strip, $3
         u = User.find_by_login(username)
         u ||= User.find_by_mail(email) unless email.blank?
-        Changeset.update_all("user_id = #{u.id}", ["committer = ?", committer]) unless u.nil?
+        Changeset.where(["committer = ?", committer]).update_all("user_id = #{u.id}") unless u.nil?
       end
     end
   end
--- a/db/migrate/20091225164732_remove_enumerations_opt.rb
+++ b/db/migrate/20091225164732_remove_enumerations_opt.rb
@@ -5,8 +5,8 @@ class RemoveEnumerationsOpt < ActiveReco
 
   def self.down
     add_column :enumerations, :opt, :string, :limit => 4, :default => '', :null => false
-    Enumeration.update_all("opt = 'IPRI'", "type = 'IssuePriority'")
-    Enumeration.update_all("opt = 'DCAT'", "type = 'DocumentCategory'")
-    Enumeration.update_all("opt = 'ACTI'", "type = 'TimeEntryActivity'")
+    Enumeration.where("type = 'IssuePriority'").update_all("opt = 'IPRI'")
+    Enumeration.where("type = 'DocumentCategory'").update_all("opt = 'DCAT'")
+    Enumeration.where("type = 'TimeEntryActivity'").update_all("opt = 'ACTI'")
   end
 end
--- a/db/migrate/20130215111141_populate_issues_closed_on.rb
+++ b/db/migrate/20130215111141_populate_issues_closed_on.rb
@@ -15,7 +15,8 @@ class PopulateIssuesClosedOn < ActiveRec
 
       # Then set closed_on for closed issues that weren't up updated by the above UPDATE
       # No journal was found so we assume that they were closed on creation
-      Issue.update_all "closed_on = created_on", {:status_id => closed_status_ids, :closed_on => nil}
+      Issue.where({:status_id => closed_status_ids, :closed_on => nil}).
+               update_all("closed_on = created_on")
     end
   end
 
